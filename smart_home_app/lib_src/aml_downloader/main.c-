#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include "aml_downloader.h"

static bool g_done = false;
static bool g_abort = false;
static bool g_error = false;

void downloader_cb(em_downloader_event e, void *param)
{
	switch(e) {
		case em_downloader_event_finish:
			printf("%s %d em_downloader_event_finish\n", __func__, __LINE__);
			g_done = true;
			break;

		case em_downloader_event_error:
			printf("%s %d em_downloader_event_error:%s\n", __func__, __LINE__, (const char*)param);
			g_error = true;
			break;

		case em_downloader_event_abort:
			printf("%s %d em_downloader_event_abort:%s\n", __func__, __LINE__, (const char*)param);
			g_abort = true;
			break;

		case em_downloader_event_progress:
			printf("%s %d progress:%g\n", __func__, __LINE__, *(double*)param);
			break;
	}
}

int main(int argc, char *argv[])
{

	st_aml_dlinfo *pdlinfo = aml_downloader_init();

	aml_downloader_setcallback(pdlinfo, downloader_cb);
	aml_downloader_seturl(pdlinfo, "http://sqdownb.onlinedown.net/down/PdfEdit2012_105.zip");
	aml_downloader_setsavepath(pdlinfo, "/data/123.zip");
	aml_downloader_start(pdlinfo);

	int time = 0;
	int sleep_time = 50 * 1000;
	while(true) {
		if(g_done || g_error || g_abort) {
			printf("%s %d g_done:%d g_error:%d g_abort:%d\n", __func__, __LINE__, g_done, g_error, g_abort);
			break;
		}

		time += sleep_time;
		usleep(sleep_time);

#if 0
		if(time == 2000 * 1000) {
			printf("%s %d aml_downloader_abort.....\n", __func__, __LINE__);
			aml_downloader_abort(pdlinfo);
			printf("%s %d.....\n", __func__, __LINE__);
		}
#endif
	}
	printf("%s %d.....\n", __func__, __LINE__);
	aml_downloader_uninit(pdlinfo);
	printf("%s %d.....\n", __func__, __LINE__);

	return 0;
}

